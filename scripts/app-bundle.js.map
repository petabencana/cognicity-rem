{"version":3,"sources":["api.js","app.js","environment.js","home.js","main.js","map.js","utils.js","resources/index.js","resources/elements/loading-indicator.js","resources/value-converters/flood-state.js"],"names":["topojson","DATA_URL","dataUrl","auth","headers","localStorage","getItem","convertTopoToGeo","data","Promise","resolve","reject","result","type","Error","geojson","feature","objects","output","API","http","isRequesting","getFloods","fetch","then","response","status","json","catch","err","getFloodStates","getInfrastructure","getReports","updateFloodState","localAreaId","state","username","method","body","deleteFloodState","console","log","AUTH0_CLIENT_ID","AUTH0_DOMAIN","App","api","i18n","router","lock","Auth0Lock","allowSignUp","isAuthenticated","isEditor","self","profile","app_metadata","role","email","on","authResult","getProfile","idToken","error","setItem","JSON","stringify","hide","navigate","configureRouter","config","title","tr","options","pushState","root","map","route","moduleId","name","login","show","logout","removeItem","debug","testing","floodStates","level","severity","levelDescription","mapConfig","region","reports_refresh","bounds","sw","ne","basemaps","url","default","attribution","detectRetina","minZoom","maxZoom","ext","infrastructure","Home","app","message","configure","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","developmentLogging","plugin","instance","i18next","setup","backend","loadPath","lng","attributes","fallbackLng","start","setRoot","L","highlightFeature","e","layer","target","setStyle","weight","color","dashArray","fillOpacity","Browser","ie","opera","edge","bringToFront","Map","defaultBindingMode","twoWay","loading","refreshing","districts","tableData","selectedDistrict","selectedArea","mapHeight","window","innerHeight","tableHeight","attached","attributionControl","fitBounds","control","scale","position","metric","imperial","addTo","mapKey","Control","extend","onAdd","container","DomUtil","create","innerHTML","addControl","basemapLayers","basemap","tileLayer","layerPromises","currentFeature","floodDict","floods","floodLayer","geoJSON","style","stroke","opacity","properties","fillColor","onEachFeature","area_id","mouseover","mouseout","resetStyle","click","getBounds","features","find","flood","parent_name","districtChanged","$isSelected","tableApi","revealItem","initDistricts","refreshFloodReports","setTimeout","reportsLayer","pointToLayer","latlng","marker","icon","iconUrl","iconSize","iconAnchor","image_url","setView","_latlng","$","html","text","append","modal","infrastructureLayers","push","all","layers","collapsed","canActivate","Array","from","Set","sort","district","filter","a","b","area_name","refreshFloodStates","clearLayers","update","length","i","j","addData","initReportCounts","assignReportCounts","reports","report","tags","local_area_id","areaSelectedInTable","$event","detail","row","getLayer","_leaflet_id","fireEvent","floodStateChanged","area","promises","fire","clearFloodStates","ok","confirm","flooded","jwtDecode","tokenIsExpired","jwt","jwtExp","exp","expiryDate","Date","setUTCSeconds","parse","globalResources","nprogress","showSpinner","LoadingIndicator","defaultValue","loadingChanged","newValue","done","FloodStateValueConverter","toView","value"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { inject } from 'aurelia-framework';\nimport { HttpClient, json } from 'aurelia-fetch-client';\n\nimport * as topojson from 'topojson-client';\n\n// Import environment variables\nimport env from './environment';\n\n// URL for Cognicity Data API\nconst DATA_URL = env.dataUrl;\n\n// Authentication headers\nconst auth = { headers: { 'Authorization': 'Bearer ' + localStorage.getItem('id_token') } };\n\n// Convert topjson to geojson\nconst convertTopoToGeo = (data) => new Promise((resolve, reject) => {\n  if (!data || !data.result || data.result.type != 'Topology')\n    reject(new Error('Unexpected response from data server'));\n  let geojson = topojson.feature(data.result, data.result.objects.output);\n  resolve(geojson);\n});\n\n// Wrapper class for API calls to Cognicity Data API\n@inject(HttpClient)\nexport class API {\n\n  // Initialize requesting status\n  isRequesting = false;\n\n  // Build the class injecting the HTTP client\n  constructor(http) {\n    this.http = http;\n  }\n\n  // Get floods as topojson, return geojson\n  getFloods = () => new Promise((resolve, reject) => {\n    return this.http.fetch(`${DATA_URL}/floods?city=jbd`, auth)\n    .then((response) => {\n      if (response.status >= 400) reject(new Error('Unexpected error retrieving floods'));\n      response.json().then((data) => resolve(convertTopoToGeo(data)));\n    })\n    .catch((err) => {\n      reject(new Error('Error retrieving floods', err));\n    });\n  });\n\n  // Get the latest flood states as json\n  getFloodStates = () => new Promise((resolve, reject) => {\n    return this.http.fetch(`${DATA_URL}/floods/states?city=jbd&minimum_state=1`, auth)\n    .then((response) => {\n      if (response.status >= 400) reject(new Error('Unexpected error retrieving flood states'));\n      response.json().then((data) => resolve(data));\n    })\n    .catch((err) => {\n      reject(new Error('Error retrieving flood states', err));\n    });\n  });\n\n  // Get infrastructure as topojson, return geojson\n  getInfrastructure = (type) => new Promise((resolve, reject) => {\n    return this.http.fetch(`${DATA_URL}/infrastructure/${type}`, auth)\n    .then((response) => {\n      if (response.status >= 400) reject(new Error('Unexpected error retrieving infrastructure'));\n      response.json().then((data) => resolve(convertTopoToGeo(data)));\n    })\n    .catch((err) => {\n      reject(new Error('Error retrieving infrastructure', err));\n    });\n  });\n\n  // Get floods as topojson, return geojson\n  getReports = () => new Promise((resolve, reject) => {\n    return this.http.fetch(`${DATA_URL}/reports?city=jbd`, auth)\n    .then((response) => {\n      if (response.status >= 400) reject(new Error('Unexpected error retrieving flood reports'));\n      response.json().then((data) => resolve(convertTopoToGeo(data)));\n    })\n    .catch((err) => {\n      reject(new Error('Error retrieving flood reports', err));\n    });\n  });\n\n  // Update the value of the flood state\n  updateFloodState = (localAreaId, state, username) => new Promise((resolve, reject) => {\n    return this.http.fetch(`${DATA_URL}/floods/${localAreaId}?username=${username}`,\n      { ...auth, ...{ method: 'put', body: json({ state }) } })\n    .then((response) => {\n      if (response.status >= 400) reject(new Error('Unexpected error updating flood state'));\n      response.json().then((data) => resolve(data));\n    })\n    .catch((err) => {\n      reject(new Error('Error updating flood state', err));\n    });\n  });\n\n  // Delete the value of the flood state\n  deleteFloodState = (localAreaId, username) => new Promise((resolve, reject) => {\n    console.log('delete called')\n    return this.http.fetch(`${DATA_URL}/floods/${localAreaId}?username=${username}`,\n      { ...auth, ...{ method: 'delete' } } )\n    .then((response) => {\n      console.log(response);\n      if (response.status >= 400) reject(new Error('Unexpected error deleting flood state'));\n      response.json().then((data) => resolve(data));\n    })\n    .catch((err) => {\n      reject(new Error('Error deleting flood state', err));\n    });\n  });\n\n}\n","import { inject } from 'aurelia-framework';\nimport { I18N } from 'aurelia-i18n';\n\nimport { API } from './api';\nimport { tokenIsExpired, getProfile } from './utils';\nimport { Router } from 'aurelia-router';\n\n// TODO: Move into environment variables\n// TODO: Check credentials and log an error if incorrect\n// const AUTH0_CLIENT_ID = 'REPLACE_WITH_ACTUAL_CLIENT_ID';\nconst AUTH0_CLIENT_ID = 'ApdfZvV1BrxXmwdg6Djrle4m2nav5ub9';\nconst AUTH0_DOMAIN = 'petabencana.au.auth0.com';\n\n// Check credentials are supplied otherwise throw error\nif (!AUTH0_CLIENT_ID || !AUTH0_DOMAIN) throw new Error('Auth0 credentials are required');\n\n@inject(API, I18N, Router)\nexport class App {\n\n  // Setup the Lock, disabling the signup option\n  lock = new Auth0Lock(AUTH0_CLIENT_ID, AUTH0_DOMAIN, {\n    allowSignUp: false\n  });\n  isAuthenticated = false;\n  isEditor = false;\n  username = null;\n\n  constructor(api, i18n, router) {\n    this.api = api;\n    this.i18n = i18n;\n    this.router = router;\n    let self = this;\n\n    // If the token has expired log the user out\n    if (tokenIsExpired()) {\n      this.isAuthenticated = false;\n      this.isEditor = false;\n      this.username = null;\n    } else {\n      this.isAuthenticated = true;\n      let profile = getProfile();\n      if (profile) {\n        this.isEditor = profile.app_metadata && profile.app_metadata.role === 'editor';\n        this.username = profile.email;\n      }\n    }\n\n    // Once authenticated save the id_token and profile to local storage\n    this.lock.on('authenticated', (authResult) => {\n      self.lock.getProfile(authResult.idToken, (error, profile) => {\n        if (error) {\n          // Handle error\n          return;\n        }\n        localStorage.setItem('id_token', authResult.idToken);\n        localStorage.setItem('profile', JSON.stringify(profile));\n        self.isEditor = profile.app_metadata && profile.app_metadata.role === 'editor';\n        self.username = profile.email;\n        self.isAuthenticated = true;\n        self.lock.hide();\n        // Redirect to the map view\n        this.router.navigate('map');\n      });\n    });\n  }\n\n  configureRouter(config, router) {\n    config.title = this.i18n.tr('title');\n    config.options.pushState = true;\n    config.options.root = '/';\n    config.map([\n      { route: '', moduleId: 'home', name: 'home', title: 'Home' },\n      { route: 'map', moduleId: 'map', name: 'map', title: 'Map' }\n    ]);\n    this.router = router;\n  }\n\n  login() {\n    this.lock.show();\n  }\n\n  logout() {\n    localStorage.removeItem('profile');\n    localStorage.removeItem('id_token');\n    this.isAuthenticated = false;\n    // Redirect to the home view\n    this.router.navigate('');\n  }\n}\n","export default {\n  debug: true,\n  testing: true,\n  dataUrl: 'http://localhost:8001',\n  floodStates: [\n    {\n      level: null,\n      severity: 'Clear',\n      levelDescription: 'NO FLOODING'\n    },\n    {\n      level: 1,\n      severity: 'Unknown',\n      levelDescription: 'AN UNKNOWN LEVEL OF FLOODING - USE CAUTION -'\n    },\n    {\n      level: 2,\n      severity: 'Minor',\n      levelDescription: 'FLOODING OF BETWEEN 10 and 70 CENTIMETERS'\n    },\n    {\n      level: 3,\n      severity: 'Moderate',\n      levelDescription: 'FLOODING OF BETWEEN 71 and 150 CENTIMETERS'\n    },\n    {\n      level: 4,\n      severity: 'Severe',\n      levelDescription: 'FLOODING OF OVER 150 CENTIMETERS'\n    }\n  ],\n  mapConfig: {\n    region: 'jbd',\n    reports_refresh: 60000, // Reports will refresh every 60 seconds\n    bounds: {\n      sw: [-6.733, 106.480],\n      ne: [-5.880, 107.175]\n    },\n    basemaps: [\n      {\n        name: 'Mapbox',\n        url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.{ext}',\n        default: true,\n        options: {\n          attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OSM</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC BY-SA</a>, Imagery &copy; <a href=\"http://mapbox.com\">Mapbox</a>',\n          detectRetina: true,\n          minZoom: 0,\n          maxZoom: 18,\n          ext: 'png'\n        }\n      }\n    ],\n    infrastructure: [\n      {\n        type: 'floodgates',\n        name: 'Pintu air',\n        default: true\n      },\n      {\n        type: 'pumps',\n        name: 'Pompa',\n        default: false\n      },\n      {\n        type: 'waterways',\n        name: 'Jalan air',\n        default: false\n      }\n    ],\n  }\n};\n","import {inject} from 'aurelia-framework';\nimport {App} from './app';\n\n@inject(App)\n\nexport class Home {\n  constructor(app) {\n    this.message = 'Welcome Home';\n    this.app = app;\n    this.app.login();\n  }\n}\n","import environment from './environment';\nimport Backend from 'i18next-xhr-backend';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n  .standardConfiguration()\n  .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.use\n    .plugin('aurelia-table')\n    .plugin('aurelia-i18n', (instance) => {\n      instance.i18next.use(Backend);\n      return instance.setup({\n        backend: {\n          loadPath: './locales/{{lng}}/{{ns}}.json'\n        },\n        lng: 'id',\n        attributes: ['t', 'i18n'],\n        fallbackLng: 'en',\n        debug: true\n      });\n    });\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { bindable, bindingMode, inject } from 'aurelia-framework';\nimport { Redirect } from 'aurelia-router';\nimport { I18N } from 'aurelia-i18n';\n\nimport * as L from 'leaflet';\n\nimport { API } from './api';\nimport { tokenIsExpired, getProfile } from './utils';\n\n// Import environment variables\nimport env from './environment';\n\n// Read map config from environment\nconst config = env.mapConfig;\n\n// Highlight a specific feature\nconst highlightFeature = (e) => {\n  let layer = e.target;\n  layer.setStyle({\n    weight: 2,\n    color: '#2e6da4',\n    dashArray: '',\n    fillOpacity: 0.7\n  });\n  if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n    layer.bringToFront();\n  }\n}\n\n@inject(API, I18N)\nexport class Map {\n\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) selectedDistrict;\n\n\n  constructor(api, i18n) {\n    this.api = api;\n    this.i18n = i18n;\n    this.profile = getProfile();\n    this.loading = true;\n    this.refreshing = true;\n    this.districts = null;\n    this.tableData = null;\n    this.selectedDistrict = null;\n    this.selectedArea = null;\n    this.floodStates = env.floodStates;\n\n    // TODO: Improve this, it is a little hacky and does not take into account user reszing their browser\n    // Map height should be a 1/3 of usable screen space (less header)\n    this.mapHeight = ( window.innerHeight * 0.66 ) - 100;\n    // Table height should be half the map height\n    this.tableHeight = this.mapHeight * 0.5;\n  }\n\n  attached() {\n\n    // Create map\n    this.map = L.map('mapContainer', {\n      attributionControl: false\n    }).fitBounds([config.bounds.sw, config.bounds.ne]);\n\n    L.control.scale({position:'bottomright', metric:true, imperial:false}).addTo(this.map);\n\n    var mapKey = L.Control.extend({\n      options: {\n        position:'bottomright'\n      },\n      onAdd: function(map) {\n        var container = L.DomUtil.create('div', 'info legend');\n\t       container.innerHTML += '<div id=\"heightsLegend\"><div class=\"sublegend\"><div style=\"font-weight:bold\">Tinggi Banjir</div><div><i class=\"color\" style=\"background:#CC2A41;\"></i><span>&nbsp;&gt; 150 cm</span></div><div><i class=\"color\" style=\"background:#FF8300\"></i><span>&nbsp;71 cm &ndash; 150 cm </span></div><div><i class=\"color\" style=\"background:#FFFF00\"></i><span>&nbsp;10 cm &ndash; 70 cm</span></div><i class=\"color\" style=\"background:#A0A9F7\"></i><span>&nbsp;RWs</span></div></div>';\n         return container;\n      }\n    });\n\n    this.map.addControl(new mapKey);\n\n    // Add basemaps\n    let basemapLayers = {};\n    for (let basemap of config.basemaps) {\n      // Create the layer\n      let layer = L.tileLayer(basemap.url, basemap.options).addTo(this.map);\n      // Add the layer to the basemaps object\n      basemapLayers[basemap.name] = layer;\n      // Add first basemap to map\n      basemap.default && layer.addTo(this.map);\n    }\n\n    // Keep track of all of our layer promises\n    let layerPromises = [];\n\n    // Keep track of currently selected feature\n    this.currentFeature = null;\n\n    // Key a track of area keys vs layer keys\n    this.floodDict = {};\n\n    // Get flood areas\n    this.api.getFloods().then((data) => {\n      this.floods = data;\n\n      // Add floods layer to map\n      this.floodLayer = L.geoJSON(this.floods, {\n        style: (feature) => {\n          let style = {\n            stroke: true,\n            color: 'grey',\n            weight: 1,\n            opacity: 0.5,\n            fillOpacity: 0.1\n          };\n          switch (feature.properties.state) {\n            case 4: return { ...style, fillColor:\"#CC2A41\",weight:1,color:\"#CC2A41\", opacity:0.8,fillOpacity: 0.8};\n            case 3: return { ...style, fillColor:\"#FF8300\",weight:1,color:\"#FF8300\", opacity:0.8,fillOpacity: 0.8};\n            case 2: return { ...style, fillColor:\"#FFFF00\",weight:1,color:\"#FFFF00\", opacity:0.8,fillOpacity: 0.8};\n            case 1: return { ...style, fillColor:\"#A0A9F7\",weight:1,color:\"#A0A9F7\", opacity:0.8,fillOpacity: 0.8};\n            default: return {...style, color:\"#444\",weight:0.2,opacity:1,fillOpacity:0};\n          }\n        },\n        onEachFeature: (feature, layer) => {\n          // Keep track of Leaflet layers against area_id\n          this.floodDict[feature.properties.area_id] = layer;\n          // Assign behaviours to the layer\n          layer.on({\n            mouseover: highlightFeature,\n            mouseout: (e) => {\n              if (this.currentFeature === null){\n                this.floodLayer.resetStyle(e.target);\n                }\n\n              else if (e.target !== this.currentFeature.target) {\n                this.floodLayer.resetStyle(e.target);\n              }\n            },\n            click: (e) => {\n              // Release selection of previous feature\n              if (this.currentFeature !== null){\n                this.floodLayer.resetStyle(this.currentFeature.target);\n              }\n\n              e.target.setStyle({\n                weight: 2,\n                color: '#2e6da4',\n                dashArray: '',\n                fillOpacity: 0.7\n              });\n\n              // Zoom to a given feature\n              this.map.fitBounds(e.target.getBounds(), {maxZoom:15});\n\n              // Update the selected area and selected district\n              this.selectedArea = this.floods.features.find((flood) =>\n                flood.properties.area_id === e.target.feature.properties.area_id)\n              this.selectedDistrict = this.selectedArea.properties.parent_name;\n              this.districtChanged(this.selectedDistrict);\n\n              // Select the area in the table\n              this.selectedArea.$isSelected = true;\n              this.tableApi.revealItem(this.selectedArea);\n\n              this.currentFeature = e;\n            }\n          });\n        }\n      }).addTo(this.map);;\n\n      // Fit the bounds to flood layer\n      this.map.fitBounds(this.floodLayer.getBounds())\n\n      // Initialise the districts list\n      this.initDistricts();\n\n      // Refresh flood reports layer then schedule to update automatically\n      this.refreshFloodReports();\n      setTimeout(() => this.refreshFloodReports(), config.reports_refresh);\n\n      // Updated refreshing status\n      this.refreshing = false;\n    })\n    .catch((err) => {\n      this.error = err.message;\n      this.refreshing = false;\n    });\n\n    // Create flood reports layer and add to the map\n    this.reportsLayer = L.geoJSON(null, {\n      pointToLayer: (feature, latlng) => {\n        return L.marker(latlng, {\n                icon: L.icon({\n                  iconUrl: `assets/icons/floodsIcon.svg`,\n                  iconSize: [30, 30],\n                  iconAnchor: [15, 15]\n                })\n              })\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on({\n          click: (e) => {\n            console.log(feature.properties.image_url);\n            this.map.setView(e.target._latlng, 15);\n            $('#myModal .modal-title').html(feature.properties.title || 'Banjir laporkan');\n            $('#myModal .modal-body').html(feature.properties.text);\n            if (feature.properties.image_url){\n              $('#myModal .modal-body').append(\"<div><img src='\" + feature.properties.image_url + \"' width=300px></div>\");\n            }\n            $('#myModal').modal();\n          }\n        });\n      }\n    });\n    this.reportsLayer.addTo(this.map);\n\n    // Add infrastructure layers\n    let infrastructureLayers = {};\n    for (let infrastructure of config.infrastructure) {\n       // Initialise object so that order is consistent\n      infrastructureLayers[infrastructure.name] = null;\n       // Call the API to get the data storing the promise in an array\n      layerPromises.push(this.api.getInfrastructure(infrastructure.type)\n        .then((data) => {\n          let layer = L.geoJSON(data, {\n            onEachFeature: (feature, layer) => {\n              layer.on({\n                click: (e) => {\n                  $('#myModal .modal-title').html(infrastructure.name);\n                  $('#myModal .modal-body').html(feature.properties.name);\n                  $('#myModal').modal();\n                }\n              });\n            },\n            pointToLayer: (feature, latlng) => {\n              return L.marker(latlng, {\n                icon: L.icon({\n                  iconUrl: `assets/icons/${infrastructure.type}Icon.svg`,\n                  iconSize: [30, 30],\n                  iconAnchor: [15, 15]\n                })\n              });\n            }\n          });\n          infrastructureLayers[infrastructure.name] = layer;\n        }));\n    }\n\n    // Add layers control once all layer promises have been resolved\n    Promise.all(layerPromises).then(() => {\n      L.control.layers(basemapLayers, infrastructureLayers, {\n        position: 'bottomleft',\n        collapsed: false\n      }).addTo(this.map);\n      this.loading = false;\n    }).catch((err) => {\n      this.error = err.message;\n      this.loading = false;\n    });\n  }\n\n  // Can this view be activated i.e. is there a valid token?\n  canActivate() {\n    // Check if token is expired and redirect if so\n    if (tokenIsExpired()) return new Redirect('/');\n    return true;\n  }\n\n  // Get a distinct list of districts from the floods data, sorted alphabetically\n  initDistricts() {\n    this.districts = Array.from(new Set(this.floods.features.map(flood => flood.properties.parent_name))).sort();\n  }\n\n  // Refresh the tableData to reflect the new district\n  districtChanged(district) {\n    this.tableData = this.floods.features\n      .filter((flood) => flood.properties.parent_name === district)\n      .sort((a, b) => {\n        if (a.properties.area_name < b.properties.area_name)\n        return -1;\n        if (a.properties.area_name > b.properties.area_name)\n        return 1;\n        return 0;\n      });\n  }\n\n  // Refresh the current flood states\n  refreshFloodStates() {\n    console.log('refresh flood states called')\n    // If no floods then return\n    if (!this.floods) return;\n    // Start the spinner\n    this.refreshing = true;\n    this.api.getFloodStates().then((data) => {\n\n      // Clear the map layer\n\n      this.floodLayer.clearLayers();\n\n\n      // Check whether updates available from server\n      let update = false;\n      if (data.result.length > 0) update = true;\n\n      // Next, update flood states\n        let i = this.floods.features.length; // Local data to be Updated\n        while (i--){ // Fast loop (see https://blogs.oracle.com/greimer/entry/best_way_to_code_a)\n\n          // Set all states to null\n          this.floods.features[i].properties.state = null;\n\n          // Only proceed with update if there is new data from the server\n          if (update){\n\n            // Now apply updates from server\n            let j = data.result.length;\n            while (j--){\n              if (this.floods.features[i].properties.area_id === data.result[j].area_id){\n                this.floods.features[i].properties.state = data.result[j].state\n              }\n            }\n          }\n        }\n      // Re-add the layer to the map\n      this.floodLayer.addData(this.floods);\n      // Stop the spinner\n      this.refreshing = false;\n    });\n  }\n\n  // Refresh flood reports\n  refreshFloodReports() {\n    // Start the spinner\n    this.refreshing = true;\n\n    this.api.getReports().then((data) => {\n      // Refresh the reports map layer\n      this.reportsLayer.clearLayers();\n      this.reportsLayer.addData(data);\n\n      // Initialise report counts\n      this.initReportCounts();\n\n      // Assign new report counts\n      this.assignReportCounts(data);\n\n      // Stop the spinner\n      this.refreshing = false;\n    });\n  }\n\n  // Clear the report counts for areas and districts\n  initReportCounts() {\n    for (let flood of this.floods.features) flood.properties.reports = 0;\n  }\n\n  // Assign report counts to reflect the new reports\n  assignReportCounts(reports) {\n    // Return if we do not have the data we need\n    if (!reports || !this.floods) return;\n\n    for (let report of reports.features) {\n      // Find the flood object associated with the report\n      let flood = this.floods.features.find((flood) =>\n        flood.properties.area_id === report.properties.tags.local_area_id);\n\n      // Increment the reports count\n      flood && flood.properties.reports++;\n    }\n  }\n\n  // When an area has been selected in the table, select the area on the map\n  areaSelectedInTable($event) {\n    this.selectedArea = $event.detail.row;\n    let layer = this.floodLayer.getLayer(this.floodDict[this.selectedArea.properties.area_id]._leaflet_id);\n    if (layer) layer.fireEvent('click');\n  }\n\n  // Set the state with the new state value\n  floodStateChanged(area) {\n    // Start the spinner\n    this.refreshing = true;\n\n    // If the new status is null then delete, otherwise update\n    let promises = [];\n    let username = this.profile ? this.profile.email : 'rem';\n    if (area.properties.state > 0) {\n      promises.push(this.api.updateFloodState(area.properties.area_id, area.properties.state, username));\n    } else {\n      promises.push(this.api.deleteFloodState(area.properties.area_id, username));\n    }\n\n    // Once the API action has been resolved refresh the table and map\n    Promise.all(promises).then((data) => {\n\n        // Refresh the flood states\n        this.refreshFloodStates();\n\n        // Fire a click event on selected polygon to update its symbology\n        // This speeds up UI feedback for the user\n        this.currentFeature.target.fire('click');\n\n      })\n      .catch((err) => {\n        this.error = err.message;\n        this.refreshing = false;\n      });\n  }\n\n  // Iterate through all non null states and clear the state with a DELETE\n  clearFloodStates() {\n    // If no floods then return\n    if (!this.floods) return;\n\n    // Make sure the user really wants to clear all flood states\n    // TODO: Replace with a nicer dialog e.g. https://github.com/aurelia/dialog\n    let ok = confirm('Are you sure you want to clear all flood states?');\n    if (!ok) return;\n\n    // Filter out the flooded states\n    let flooded = this.floods.features.filter((flood) => flood.properties.state);\n\n    // Generate a delete request for each\n    let promises = [];\n\n    flooded.map((flood) => {\n      promises.push(this.api.deleteFloodState(flood.properties.area_id, this.profile ? this.profile.email : 'rem'))\n    });\n\n    // When all flood states have been cleared\n    Promise.all(promises).then(() => {\n\n      // Refresh the flood states\n      this.refreshFloodStates();\n\n    }).catch((err) => {\n      this.error = err.message;\n      this.refreshing = false;\n    });\n  }\n}\n","const jwtDecode = require('jwt-decode');\n\nexport function tokenIsExpired() {\n  let jwt = localStorage.getItem('id_token');\n  if (jwt) {\n    let jwtExp = jwtDecode(jwt).exp;\n    let expiryDate = new Date(0);\n    expiryDate.setUTCSeconds(jwtExp);\n\n    // Check date against expiry date\n    if (new Date() < expiryDate) return false;\n  }\n  return true;\n}\n\nexport function getProfile() {\n  let profile = localStorage.getItem('profile');\n  if (profile) return JSON.parse(profile);\n  return null;\n}\n","export function configure(config) {\n  config.globalResources([\n    './elements/loading-indicator', './value-converters/flood-state'\n  ]);\n}\n","import * as nprogress from 'nprogress';\nimport { bindable, noView, decorators } from 'aurelia-framework';\n\n// Do not show the spinner\nnprogress.configure({ showSpinner: false });\n\nexport let LoadingIndicator = decorators(\n  noView(['nprogress/nprogress.css']),\n  bindable({name: 'loading', defaultValue: false})\n).on(class {\n  loadingChanged(newValue) {\n    if (newValue) {\n      nprogress.start();\n    } else {\n      nprogress.done();\n    }\n  }\n});\n","import { floodStates } from '../../map';\n\n// Import environment variables\nimport env from '../../environment';\n\nexport class FloodStateValueConverter {\n  toView(value) {\n    return value ? env.floodStates[value].severity : '-';\n  }\n}\n"],"sourceRoot":"../src"}